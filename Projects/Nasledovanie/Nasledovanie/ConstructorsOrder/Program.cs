using System;

namespace ConstructorsOrder
{
    class A
    {
        public A()
        {
            Console.WriteLine("Создаем объект класса А");
        }
    }
    class B : A
    {
        public B()
        {
            Console.WriteLine("Создаем объект класса B");
        }
    }
    class C : B
    {
        public C()
        {
            Console.WriteLine("Создаем объект класса C");
        }
    }
    class Program
    {
        /*
        в отношении наследования и иерархии классов может возникнуть следующий резонный вопрос: когда создается объект производного
        класса и какой конструктор выполняется первым — тот, что определен в производном
        классе, или же тот, что определен в базовом классе? Так, если имеется базовый класс А
        и производный класс В, то вызывается ли конструктор класса А раньше конструктора
        класса В? Ответ на этот вопрос состоит в том, что в иерархии классов конструкторы вызываются по порядку выведения классов: 
        от базового к производному. Более того, этот порядок остается неизменным независимо от использования ключевого слова base.
        Так, если ключевое слово base не используется, то выполняется конструктор по умолчанию, т.е. конструктор без параметров. 
        В приведенном ниже примере программы демонстрируется порядок вызова и выполнения конструкторов. 
        */
        static void Main(string[] args)
        {
            C val = new C();
            Console.ReadKey();
            /*
            Если хорошенько подумать, то в вызове конструкторов по порядку выведения их
            классов можно обнаружить определенный смысл. Ведь базовому классу ничего 
            не известно ни об одном из производных от него классов, и поэтому любая инициализация,
            которая требуется его членам, осуществляется совершенно отдельно от инициализации членов производного класса, 
            а возможно, это и необходимое условие. Следовательно, она должна выполняться первой.
            */
        }
    }
}

